from app.pages.swap_page import SwapScreen, Locators
from app.config.config import TestData
import pytest

@pytest.mark.usefixtures('init_driver')
class TestSwap:
    '''Проверить экран без выбранных токенов'''
    def test_swap_first_screen(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()

        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SELECT_TOKEN1)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SELECT_TOKEN2)
        assert swap_screen.is_enable_to_tap(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_visible(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_enable_to_tap(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SKAN_QR)

    '''Вернуться стрелкой назад в подраздел'''
    def test_swap_first_screen_back(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_LEFT_BUTTON)

        assert swap_screen.is_enable_to_tap(Locators.BTN_INHERIANCE)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SWAP_LIQ)
        assert swap_screen.is_enable_to_tap(Locators.BTN_LIST)
        assert swap_screen.is_enable_to_tap(Locators.BTN_GUARANTIE)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SETTINGS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_WALLET)
        assert swap_screen.is_enable_to_tap(Locators.BTN_CHAT)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SELL)
        assert swap_screen.is_enable_to_tap(Locators.BTN_BUY)
        assert swap_screen.is_enable_to_tap(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_enable_to_tap(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SKAN_QR)

    '''Попробовать сменить аккаунт'''
    def test_swap_change_acc(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.TEXT_AKK_NAME)

        assert swap_screen.is_disable_to_tap(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SELECT_TOKEN1)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SELECT_TOKEN2)
        assert swap_screen.is_enable_to_tap(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_enable_to_tap(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_SKAN_QR)

    '''ДОБАВЛЕНИЕ ЛИКВИДНОСТИ'''
    '''Проверить экран c выбранными токенами, если пул существует'''
    def test_swap_cash_screen(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)

        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.TEXT_TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_visible(Locators.TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_ADD_LIQ)
        assert swap_screen.is_enable_to_tap(Locators.BNT_WITHDRAW_LIQ)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)
        assert swap_screen.is_visible(Locators.BTN_ADD_LIQUIDITY)
        assert swap_screen.is_visible(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_visible(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_visible(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_visible(Locators.BTN_SKAN_QR)

    '''Ввести в первое поле корректное значение, сверить данные с попапом'''
    def test_swap_confirm(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        sum1 = swap_screen.conver_in_num(Locators.FIELD_TOKEN1)
        sum2 = swap_screen.conver_in_num(Locators.FIELD_TOKEN2)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert sum1 == swap_screen.conver_in_num(Locators.POPUP_SUM1_ADD)
        assert sum2 == swap_screen.conver_in_num(Locators.POPUP_SUM2_ADD)
        assert swap_screen.is_visible(Locators.POPUP_SUM1_ADD)
        assert swap_screen.is_visible(Locators.POPUP_SUM2_ADD)
        assert swap_screen.is_visible(Locators.POPUP_TEXT)
        assert swap_screen.is_enable_to_tap(Locators.POPUP_BTN_CONFIRM)

    '''Ввести в первое поле корректное значение, добавить ликвидность'''
    def test_swap_add_liq(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)
        sum1 = swap_screen.conver_in_num(Locators.POPUP_SUM1_ADD)
        sum2 = swap_screen.conver_in_num(Locators.POPUP_SUM2_ADD)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert sum1 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM2)
        assert sum2 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM1)
        assert swap_screen.is_visible(Locators.LIQ_TOKEN)
        assert swap_screen.is_visible(Locators.TRANSACTION_ID)
        assert swap_screen.is_enable_to_tap(Locators.BTN_TRANSACTION_COPY)
        assert swap_screen.is_enable_to_tap(Locators.BTN_VIEW_BLOKSIO)

    '''Ввести во второе поле корректное значение, добавить ликвидность'''
    def test_swap_add_liq2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN2)
        swap_screen.send_keys(Locators.FIELD_TOKEN2, TestData.SUM_SWAP)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)
        sum1 = swap_screen.conver_in_num(Locators.POPUP_SUM1_ADD)
        sum2 = swap_screen.conver_in_num(Locators.POPUP_SUM2_ADD)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert sum1 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM2)
        assert sum2 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM1)
        assert swap_screen.is_visible(Locators.LIQ_TOKEN)
        assert swap_screen.is_visible(Locators.TRANSACTION_ID)
        assert swap_screen.is_enable_to_tap(Locators.BTN_TRANSACTION_COPY)
        assert swap_screen.is_enable_to_tap(Locators.BTN_VIEW_BLOKSIO)

    '''В первое поле пополнения большую сумму токена, чем есть на счету, попробовать добавить ликвидность'''
    def test_swap_add_liq_bigsumm(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_MAX_EXCHANGE)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_visible(Locators.TEXT_ERROR_SUMM)
        assert swap_screen.is_visible(Locators.BTN_ADD_LIQUIDITY)
        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.TEXT_TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_visible(Locators.TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_ADD_LIQ)
        assert swap_screen.is_enable_to_tap(Locators.BNT_WITHDRAW_LIQ)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)
        assert swap_screen.is_visible(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_visible(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_visible(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_visible(Locators.BTN_SKAN_QR)

    '''Во второе поле пополнения большую сумму токена, чем есть на счету, попробовать добавить ликвидность'''
    def test_swap_add_liq_bigsumm2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN2, TestData.SUM_MAX_EXCHANGE)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_visible(Locators.TEXT_ERROR_SUMM)
        assert swap_screen.is_visible(Locators.BTN_ADD_LIQUIDITY)
        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.TEXT_TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_visible(Locators.TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_enable_to_tap(Locators.BTN_ADD_LIQ)
        assert swap_screen.is_enable_to_tap(Locators.BNT_WITHDRAW_LIQ)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)
        assert swap_screen.is_visible(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_visible(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_visible(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_visible(Locators.BTN_SKAN_QR)

    '''Ввести в первое поле 0, во второе - корректное значение, добавить ликвидность'''
    def test_swap_add_liq_zero01(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.FIELD_TOKEN2)
        swap_screen.send_keys(Locators.FIELD_TOKEN2, TestData.SUM_SWAP)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)
        sum1 = swap_screen.conver_in_num(Locators.POPUP_SUM1_ADD)
        sum2 = swap_screen.conver_in_num(Locators.POPUP_SUM2_ADD)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert sum1 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM2)
        assert sum2 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM1)
        assert swap_screen.is_visible(Locators.LIQ_TOKEN)
        assert swap_screen.is_visible(Locators.TRANSACTION_ID)
        assert swap_screen.is_enable_to_tap(Locators.BTN_TRANSACTION_COPY)
        assert swap_screen.is_enable_to_tap(Locators.BTN_VIEW_BLOKSIO)

    '''Ввести во второе поле 0, во первое - корректное значение, добавить ликвидность'''
    def test_swap_add_liq_zero10(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN2)
        swap_screen.send_keys(Locators.FIELD_TOKEN2, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)
        sum1 = swap_screen.conver_in_num(Locators.POPUP_SUM1_ADD)
        sum2 = swap_screen.conver_in_num(Locators.POPUP_SUM2_ADD)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert sum1 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM2)
        assert sum2 == swap_screen.conver_in_num(Locators.POPUP_COMPL_SUM1)
        assert swap_screen.is_visible(Locators.LIQ_TOKEN)
        assert swap_screen.is_visible(Locators.TRANSACTION_ID)
        assert swap_screen.is_enable_to_tap(Locators.BTN_TRANSACTION_COPY)
        assert swap_screen.is_enable_to_tap(Locators.BTN_VIEW_BLOKSIO)

    '''Ввести в оба поля 0, попробовать добавить ликвидность'''
    def test_swap_add_liq_zero00(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.FIELD_TOKEN2)
        swap_screen.send_keys(Locators.FIELD_TOKEN2, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_disable_to_tap(Locators.BTN_ADD_LIQUIDITY)

    '''Ввести в первое поле значение меньше 0,00001 cash, попробовать добавить ликвидность'''
    def test_swap_add_liq_min_cash(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_UAHCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP_MIN_CASH)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_disable_to_tap(Locators.BTN_ADD_LIQUIDITY)

    '''Ввести в первое поле значение меньше 0,00000001 list, попробовать добавить ликвидность'''
    def test_swap_add_liq_min_li(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LIUAIEV)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP_MIN_LI)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_disable_to_tap(Locators.BTN_ADD_LIQUIDITY)

    '''Ввести в первое поле значение меньше 1 LQ, попробовать добавить ликвидность'''
    def test_swap_add_liq_min_lq(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.FIELD_TOKEN1)
        swap_screen.send_keys(Locators.FIELD_TOKEN1, TestData.SUM_SWAP_MIN_LQ)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_ADD_LIQUIDITY)

        assert swap_screen.is_disable_to_tap(Locators.BTN_ADD_LIQUIDITY)

    '''Проверить экран c выбранными токенами, если пул не существует'''
    def test_swap_cash_screen_not_pool(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LIUAIEV)

        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)

    '''поменять местами токены и проверить есть ли такой пул'''
    def test_swap_cash_screen_not_pool2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LIUAIEV)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)

        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)

    '''Создание пула. Добавление ликвидности'''
    def test_swap_add_pool(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQA)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW1)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW1, TestData.SUM_SWAP_ADD_POOL1)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW2)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW2, TestData.SUM_SWAP_ADD_POOL2)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.BTN_CREATE_POOL)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert swap_screen.is_visible(Locators.SCREEN_SWAP)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT1)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS1)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_BALANCE2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_SYMBOL2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_DESC2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_ICON2)
        assert swap_screen.is_enable_to_tap(Locators.TOKEN_CONTRACT2)
        assert swap_screen.is_enable_to_tap(Locators.THREE_DOTS2)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.CURRENT_EXCHANGE_RATE)
        assert swap_screen.is_visible(Locators.TEXT_CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.CURRENT_POOL_SIZE)
        assert swap_screen.is_visible(Locators.TEXT_TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_visible(Locators.TOTAL_LIQUIDITY_TOKENS)
        assert swap_screen.is_visible(Locators.TEXT_MY_LIQ_TOKENS)
        assert swap_screen.is_visible(Locators.MY_LIQ_TOKENS_ICON)
        assert swap_screen.is_visible(Locators.MY_LIQ_TOKENS_SYMBOL)
        assert swap_screen.is_visible(Locators.MY_LIQ_TOKENS_DESC)
        assert swap_screen.is_visible(Locators.MY_LIQ_TOKENS_BAL)
        assert swap_screen.is_enable_to_tap(Locators.BTN_ADD_LIQ)
        assert swap_screen.is_enable_to_tap(Locators.BNT_WITHDRAW_LIQ)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN1)
        assert swap_screen.is_visible(Locators.FIELD_TOKEN2)
        assert swap_screen.is_visible(Locators.BTN_ADD_LIQUIDITY)
        assert swap_screen.is_visible(Locators.BTN_LEFT_BUTTON)
        assert swap_screen.is_visible(Locators.TEXT_AKK_NAME)
        assert swap_screen.is_visible(Locators.BTN_RES_AND_TRANS)
        assert swap_screen.is_visible(Locators.BTN_SKAN_QR)

    '''Создание пула. В первое поле - корректное значение. Во второе поле - больше, чем есть на счету'''
    def test_swap_add_pool_incorrect(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQA)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW1)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW1, TestData.SUM_SWAP_ADD_POOL1)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW2)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW2, TestData.SUM_MAX_EXCHANGE)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)

        assert swap_screen.is_visible(Locators.TEXT_ERROR_SUMM)
        assert swap_screen.is_visible(Locators.CREATE_EXCHANGE_RATE)

    '''Создание пула. Во второе поле - корректное значение. В первое поле - больше, чем есть на счету'''
    def test_swap_add_pool_incorrect2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQA)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW1)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW1, TestData.SUM_MAX_EXCHANGE)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW2)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW2, TestData.SUM_SWAP_ADD_POOL1)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)

        assert swap_screen.is_visible(Locators.TEXT_ERROR_SUMM)
        assert swap_screen.is_visible(Locators.CREATE_EXCHANGE_RATE)

    '''Создание пула. В оба поля ввести 0'''
    def test_swap_add_pool_zero(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQA)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW1)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW1, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW2)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW2, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)

        assert swap_screen.is_visible(Locators.CREATE_EXCHANGE_RATE)

    '''Создание пула. В одно поле ввести 0, в другое - корректное значение'''
    def test_swap_add_pool_zero2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_LQC)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_LQA)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW1)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW1, TestData.SUM_ZERO)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)
        swap_screen.tap(Locators.FIELD_TOKEN_NEW2)
        swap_screen.send_keys(Locators.FIELD_TOKEN_NEW2, TestData.SUM_SWAP_ADD_POOL1)
        swap_screen.tap(Locators.TEXT_NOT_HAVE_POOL)

        assert swap_screen.is_visible(Locators.CREATE_EXCHANGE_RATE)

    '''ИЗЫМАНИЕ ЛИКВИДНОСТИ'''
    '''Проверить что данные поп-апа перед подтверждением совпадают с данными курса на экране'''
    def test_swap_withdraw_liq(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_WITHDRAW)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        token_receive1 = swap_screen.get_text2(Locators.TEXT_YOU_RECEIVE1)
        token_receive2 = swap_screen.get_text2(Locators.TEXT_YOU_RECEIVE2)
        swap_screen.tap(Locators.BTN_WITHDRAW)

        assert token_receive1 == swap_screen.get_text2(Locators.POPUP_WITHDRAW_GET_TOKEN1)
        assert token_receive2 == swap_screen.get_text2(Locators.POPUP_WITHDRAW_GET_TOKEN2)
        assert swap_screen.conver_in_num(Locators.POPUP_WITHDRAW_RETURN) == swap_screen.conver_in_num(TestData.SUM_SWAP_WITHDRAW)
        assert swap_screen.is_enable_to_tap(Locators.POPUP_BTN_CONFIRM)
        assert swap_screen.is_visible(Locators.POPUP_WITHDRAW_RETURN)

    '''Изъять часть ликвидности'''
    def test_swap_withdraw_liq2(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_WITHDRAW)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_WITHDRAW)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert swap_screen.is_visible(Locators.POPUP_COMPL_WITHDRAW_TOKEN1)
        assert swap_screen.is_visible(Locators.POPUP_COMPL_WITHDRAW_TOKEN2)
        assert swap_screen.is_visible(Locators.LIQ_TOKEN)
        assert swap_screen.is_visible(Locators.TRANSACTION_ID)
        assert swap_screen.is_enable_to_tap(Locators.BTN_TRANSACTION_COPY)
        assert swap_screen.is_enable_to_tap(Locators.BTN_VIEW_BLOKSIO)

    '''Изъять 1 токен ликвидности'''
    def test_swap_withdraw_liq_min(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_ADD_POOL1)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_WITHDRAW)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert swap_screen.is_visible(Locators.POPUP_ERROR )
        assert swap_screen.is_visible(Locators.TEXT_ERROR_MIN_SUM)

    '''попробовать изъять дробное значение токена ликвидности'''
    def test_swap_withdraw_liq_drob(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_DROB)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        swap_screen.tap(Locators.BTN_WITHDRAW)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)

        assert swap_screen.is_visible(Locators.POPUP_ERROR)
        assert swap_screen.is_visible(Locators.TEXT_ERROR_DROB_SUM)

    '''попробовать изъять ликвидность, если вся ликвидность изъята'''
    def test_swap_withdraw_liq_zero_zero(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_EURCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_WITHDRAW)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)

        assert swap_screen.is_visible(Locators.TEXT_IND_BALANCE)

    '''попробовать изъять ликвидность, больше, чем есть на счету'''
    def test_swap_withdraw_liq_bigger(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, TestData.SUM_SWAP_MAX)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)

        assert swap_screen.is_visible(Locators.TEXT_IND_BALANCE)

    '''Изъять всю ликвидность'''
    def test_swap_withdraw_liq_all(self):
        swap_screen = SwapScreen(self.driver)
        swap_screen.open_swap()
        swap_screen.tap(Locators.BTN_SELECT_TOKEN1)
        swap_screen.tap(Locators.TOKEN_NAME_RUBCASH)
        swap_screen.tap(Locators.BTN_SELECT_TOKEN2)
        swap_screen.tap(Locators.TOKEN_NAME_USDCASH)
        swap_screen.tap(Locators.BNT_WITHDRAW_LIQ)
        sum = swap_screen.conver_in_num(Locators.MY_LIQ_TOKENS_BAL)
        '''невозможно конвертировать строку в число. В локаторе "Мои токены ликвидности сумма записана как текст'''
        swap_screen.tap(Locators.FIELD_WITHDRAW_LIQ)
        swap_screen.send_keys(Locators.FIELD_WITHDRAW_LIQ, sum)
        swap_screen.tap(Locators.TEXT_CURRENT_POOL_SIZE)
        '''swap_screen.tap(Locators.BTN_WITHDRAW)
        swap_screen.tap(Locators.POPUP_BTN_CONFIRM)'''